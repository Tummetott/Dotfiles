# vim: set ft=config:

# Fonts
font_family      FiraCode Nerd Font Mono
bold_font        auto
italic_font      auto
bold_italic_font auto
font_size {{ .fontsize }}

# You can modify the size of the cell in which each font glyph is rendered and
# the baseline at which the glyph is placed in the cell. Note that modifying the
# baseline will automatically adjust the underline and strikethrough positions
# by the same amount. Increasing the baseline raises glyphs inside the cell and
# decreasing it lowers them. Decreasing the cell size might cause rendering
# artifacts, so use with care.
 modify_font cell_height 85%
 modify_font baseline 3

# Kitty-scrollback controls kitty via a UNIX socket
allow_remote_control socket-only
listen_on unix:/tmp/kitty

# Create an alias for the kitten
action_alias scrollback_nvim kitten
    \ ~/.local/share/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py
    \ --nvim-args -u ~/.config/nvim/lua/tummetott/plugins/kitty-scrollback/scrollback-conf.lua

# Keymap to browse the whole scrollback buffer
map kitty_mod+enter scrollback_nvim
# map kitty_mod+g scrollback_nvim --config last_cmd
# map kitty_mod+ scrollback_nvim --config last_visited_cmd

# Open the a URL with ctrl+left click
mouse_map cmd+left release grabbed,ungrabbed mouse_handle_click link

enable_audio_bell no

# If enabled, the OS Window size will be remembered so that new instances of
# kitty will have the same size as the previous instance.
remember_window_size  yes

# The window padding (in pts) (blank area between the text and the window
# border). A single value sets all four sides. Two values set the vertical and
# horizontal sides. Three values set top, horizontal and bottom. Four values set
# top, right, bottom and left.
window_padding_width 4

# Ask for confirmation when closing an OS window or a tab with at least this
# number of kitty windows in it by window manager (e.g. clicking the window
# close button or pressing the operating system shortcut to close windows) or by
# the close_tab action. A value of zero disables confirmation. This confirmation
# also applies to requests to quit the entire application (all OS windows, via
# the quit action). Negative values are converted to positive ones, however,
# with shell_integration enabled, using negative values means windows sitting at
# a shell prompt are not counted, only windows where some command is currently
# running. Note that if you want confirmation when closing individual windows,
# you can map the close_window_with_confirmation action.
confirm_os_window_close 0

#: HACK: kitty v0.21.2 had the protocol extension for clipboard
#: concatenation enabled by default. I can disable this with 'no-append'
clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask no-append

# Enable shell integration on supported shells. This enables features such as
# jumping to previous prompts, browsing the output of the previous command in a
# pager, etc. on supported shells.
shell_integration enabled

# Have kitty quit when all the top-level windows are closed on macOS. By
# default, kitty will stay running, even with no open windows, as is the
# expected behavior on macOS.
macos_quit_when_last_window_closed yes

# HACK: Given that tmux lacks support for kitty's keyboard protocol, we find
# ourselves in the position of manually defining the appropriate 'CSI u'
# sequences that tmux understands.
map ctrl+0 send_text all \e[48;5u
map ctrl+1 send_text all \e[49;5u
map ctrl+2 send_text all \e[50;5u
map ctrl+3 send_text all \e[51;5u
map ctrl+4 send_text all \e[52;5u
map ctrl+5 send_text all \e[53;5u
map ctrl+6 send_text all \e[54;5u
map ctrl+7 send_text all \e[55;5u
map ctrl+8 send_text all \e[56;5u
map ctrl+9 send_text all \e[57;5u
map ctrl+. send_text all \e[46;5u
map ctrl+, send_text all \e[44;5u
map ctrl+; send_text all \e[59;5u
map ctrl+/ send_text all \e[47;5u
map shift+enter send_text all \e[13;2u

# HACK: tmux struggles to differentiate between TAB and C-i, as well as CR and
# C-m. Even when sending the correct 'CSI u' sequence for C-i and C-m, tmux
# v3.3a may incorrectly interpret these as TAB or CR. To address this issue, a
# workaround involves sending a custom escape sequence (\e[555;0) before the
# 'CSI u' sequence for the key in question. Within the tmux.conf, this custom
# sequence serves as a modifier to indicate that the subsequent sequence should
# not be interpreted as TAB or CR but as C-i or C-m.
# One drawback of this approach arises when tmux is not in use. In such cases,
# the custom sequence, which precedes the 'CSI u' sequence, is also transmitted
# to the terminal program. While most terminal programs ignore unknown custom
# sequences (like nvim), some may exhibit unexpected behavior. For instance, my
# zsh-vi-mode plugin interprets this custom sequence as ESC, transitioning to
# normal mode. However, this is a minor side effect since I do not use the keys
# C-i and C-m in zsh.
map ctrl+i send_text all \e[555;0~\e[105;5u
map ctrl+m send_text all \e[555;0~\e[109;5u
