######## GLOBAL SETTING

# Ideally, terminfo should be 'tmux-256color' in order to support italic fonts.
# Unforunately, macOS comes with ncurses version 5.7 which does not ship the
# terminfo description for tmux. Upgrading ncurses with homebrew is not an
# option since ncurses versions are incompatible and many system programs would
# break with the update. Downloading the most recent terminfo database from
# version 6.3 and building with 5.7 works but breaks the colors in some programs
# (eg. htop). However, it is possible to download and build the terminfo from
# the tmux maintainers (see bootstrap script). If there are problems with
# 'tmux-256color', 'screen-256color' can always be used as a fallback (without
# italic font support). Note: terminfo of the terminal emulator != terminfo of
# tmux
set -g default-terminal 'tmux-256color'

# When the terminfo value is 'alacritty-direct' tmux automatically detects
# truecolor support. For other terminals, ensure truecolor support in tmux by
# setting the 'RGB' flag. These settings are applicable to tmux 3.2 and later;
# please consult the manual if you are using older versions.
set -sa terminal-features ',alacritty:RGB'
set -sa terminal-features ',xterm-kitty:RGB'
set -sa terminal-features ',xterm-256color:RGB'

# Disable delay time between commands
set -s escape-time 0

# Longer display time for tmux messages
set -g display-time 2000

# Turn on mouse control
set -g mouse on

# Focus events are requested from the terminal if supported and passed through
# to applications
set -s focus-events on

# Increase scrollback buffer size
set -g history-limit 50000

# Automatically renumber tmux windows
set -g renumber-windows on

# Increase the refresh frequency of 'status-left' and 'status-right'
set -g status-interval 5

# Make window / pane index start with 1
set -g base-index 1
set -g pane-base-index 1

# Tmux 3.3a disabled passthrough sequences, but they are needed for base16-shell
if "tmux -V | grep -q '3.3a'" 'set -g allow-passthrough on'

# Left side just shows my windows, no status element
set -g status-left ''

# Set length of status-right to a bigger value
set -g status-right-length 80

# Color-dependent settings are centralized in a dedicated shell script, enabling
# conditional branching to adapt to the chosen color scheme.
run $XDG_CONFIG_HOME/tmux/style.tmux

######## KEYBINDINGS

# Remap prefix from C-b to C-SPC
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

# To avoid accidental key mispresses, most of the keymaps are mapped twice.
# First as <prefix> <keymap>, second as <prefix> C-<keymap>

bind c kill-pane
bind C-c kill-pane

bind t new-window
bind C-t new-window

bind n next-window
bind C-n next-window

bind p previous-window
bind C-p previous-window

bind Space last-window
bind C-Space last-window

bind x kill-window
bind C-x kill-window

bind d detach-client
bind C-d detach-client

# Circle through lazyouts
bind o next-layout
bind C-o next-layout

# Reload tmux.conf with 'r'
bind r source-file $XDG_CONFIG_HOME/tmux/tmux.conf \;\
    display "TMUX config reloaded!"
bind C-r source-file $XDG_CONFIG_HOME/tmux/tmux.conf \;\
    display "TMUX config reloaded!"

# Enable Vim keybindings for vertical and horizontal splitting. Newly created
# splits share the same directory as their parent.
bind v split-window -h -c "#{pane_current_path}"
bind C-v split-window -h -c "#{pane_current_path}"
bind s split-window -v -c "#{pane_current_path}"
bind C-s split-window -v -c "#{pane_current_path}"

# Enable seamless navigation between Neovim and tmux splits using a consistent
# set of keymaps
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n C-h if "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if "$is_vim" "send-keys C-l" "select-pane -R"
bind -T copy-mode-vi C-h select-pane -L
bind -T copy-mode-vi C-j select-pane -D
bind -T copy-mode-vi C-k select-pane -U
bind -T copy-mode-vi C-l select-pane -R

# Restore the default behavior of CTRL-l (clear screen) by binding it to
# <prefix> CTRL-l.
bind C-l send-keys 'C-l'

# Enter copy mode without showing the positon indicator in the top right
bind -N 'Start copy mode' m copy-mode -H
bind -N 'Start copy mode' C-m copy-mode -H
unbind [

# This keymap is the default, I just added the -H flag to supress the ugly
# posiiton indicator in the top right
    bind -n MouseDrag1Pane if -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" \
{ send-keys -M } { copy-mode -M -H }

# Vim commands in copy mode
setw -g mode-keys vi
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi V send -X select-line
bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi C-v send -X rectangle-toggle \;\
    send -X begin-selection

# Use incremental search inside copy mode
bind -T copy-mode-vi / command-prompt -i -p 'Search down:' \
    'send -X search-forward-incremental "%%%"'
bind -T copy-mode-vi ? command-prompt -i -p 'Search up:' \
    'send -X search-backward-incremental "%%%"'

# Keymaps for direct inremental search
bind -N 'Forward search' / copy-mode -H \; command-prompt -i -p 'Search down:' \
    'send -X search-forward-incremental "%%%"'
bind -N 'Backward search' ? copy-mode -H \; command-prompt -i -p 'Search up:' \
    'send -X search-backward-incremental "%%%"'

# Show help
bind -N 'Show help' h list-keys -N

# Run 'chezmoi apply' in a new window. Wait for keyboard input (e.g. CR) in case
# the cmd did with an error.
bind -N 'Chezmoi apply' -n C-o new-window 'zsh -c "chezmoi apply || read -r"'

# Split run two commands in two split panes
bind -N 'Split run two commands in two split panes' b \
    run $XDG_CONFIG_HOME/tmux/split-run.tmux

# HACK: tmux struggles to differentiate between TAB and C-i, as well as CR and
# C-m. Even when sending the correct 'CSI u' sequence for C-i and C-m, tmux
# v3.3a may incorrectly interpret these as TAB or CR. To tackle this issue, I've
# configured my terminal emulator to send a custom escape sequence (\e[555;0)
# ahead of the 'CSI u' sequence for the key in question. This custom sequence
# serves as a modifier to indicate that the subsequent sequence should not be
# interpreted as TAB or CR but as C-i or C-m.
# One drawback of this approach arises when tmux is not in use. In such cases,
# the custom sequence, which precedes the 'CSI u' sequence, is also transmitted
# to the terminal program. While most terminal programs ignore unknown custom
# sequences (like nvim), some may exhibit unexpected behavior. For instance, my
# zsh-vi-mode plugin interprets this custom sequence as ESC, transitioning to
# normal mode. However, this is a minor side effect since I do not use the keys
# C-i and C-m in zsh.
set -s user-keys[0] "\e[555;0~"
bind -n User0 set key-table virt
bind -T virt 'C-i' send Escape '[105;5u' \; set key-table root
bind -T virt 'C-m' send Escape '[109;5u' \; set key-table root

# Request extended keys keys from the terminal emulator. Not necessary for
# kitty, as I've explicitly configured it to send CSI u sequences. However, this
# request can prove valuable for other terminal emulators that may not have such
# configurations in place.
set -g extended-keys on

######## PLUGIN MANAGER

setenv -g TMUX_PLUGIN_MANAGER_PATH "$XDG_DATA_HOME/tmux"

# Bootstrap tpm
if "test ! -d $XDG_DATA_HOME/tmux/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm $XDG_DATA_HOME/tmux/tpm \
   && $XDG_DATA_HOME/tmux/tpm/bin/install_plugins'"

# Initialize tpm. Keep this line at the very bottom of the config
run "$XDG_DATA_HOME/tmux/tpm/tpm"
